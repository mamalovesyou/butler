// Code generated by schema-generate. DO NOT EDIT.

package linkedin_ads

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

type ListAccounts struct {
	Accounts []Account `json:"elements,omitempty"`
}

type Account struct {
	Created         string      `json:                "created,omitempty"`
	Currency        string      `json:"currency,omitempty"`
	Id              int64       `json:"id,omitempty"`
	LastModified    string      `json:"lastModified,omitempty"`
	Name            string      `json:"name,omitempty"`
	ServingStatuses []string    `json:"servingStatuses,omitempty"`
	Status          string      `json:"status,omitempty"`
	Test            bool        `json:"test,omitempty"`
	Type            string      `json:"type,omitempty"`
	Version         *VersionTag `json:"version,omitempty"`
}

type VersionTag struct {
	versionTag string `json:"versionTag,omitempty"`
}

var apiRoot = "https://api.linkedin.com" // api domain
var apiAccounts = "v2/adAccountsV2"      // user root

type LinkedinClient struct {
	accessToken string
}

func NewLinkedinClient(token string) *LinkedinClient {
	return &LinkedinClient{token}
}

func (client *LinkedinClient) ListAccounts() (*ListAccounts, error) {
	// Create a Bearer string by appending string access token
	var bearer = "Bearer " + client.accessToken
	//fmt.Println("Using auth header", bearer)
	url := apiRoot + "/" + apiAccounts + "?q=search&search=(type:(values:List(BUSINESS)),status:(values:List(ACTIVE,CANCELED)))"
	fmt.Println("using url", url)
	// Create a new request using http
	req, err := http.NewRequest("GET", url, nil)

	// add authorization header to the req
	req.Header.Add("Authorization", bearer)
	req.Header.Add("X-Restli-Protocol-Version", "2.0.0")
	// Send req using http Client
	httpClient := &http.Client{}
	resp, err := httpClient.Do(req)
	if err != nil {
		fmt.Println("Error on response.\n[ERROR] -", err)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Failed to parse body", err)
		return nil, err
	}
	var result ListAccounts
	err = json.Unmarshal(body, &result)
	if err != nil {
		fmt.Println("error unmarshalling body", err)
		panic(err)
	}

	return &result, nil
}
