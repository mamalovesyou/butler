name: Deploy new release (manual)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The Release Version'
        required: true

jobs:
  version:
    runs-on: ubuntu-latest
#    if: startsWith(github.ref, 'refs/heads/v')
    name: Set release tag version
    outputs:
      version: ${{ steps.vars.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set tag
        id: vars
        # run: echo ::set-output name=version::${GITHUB_REF##*/}
        run: echo ::set-output name=version::${{ github.event.inputs.version }}

  terraform:
    needs: version
    name: Provision infra
    runs-on: ubuntu-latest
    outputs:
      kubeconfig: ${{ steps.outputs.outputs.kubeconfig }}
      users_db_address: ${{ steps.outputs.outputs.users_db_address }}
      cert_manager_irsa_role_arn: ${{ steps.outputs.outputs.cert_manager_irsa_role_arn }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      TF_VAR_users_db_password: ${{ secrets.USERS_DB_PASSWORD }}
      TF_WORKSPACE: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform Init
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform format
        id: fmt
        working-directory: ./deployment/terraform
        run: terraform fmt -check

      - name: Terraform init
        id: init
        working-directory: ./deployment/terraform
        run: terraform init

      - name: Terraform workspace
        id: workspace
        working-directory: ./deployment/terraform
        run: terraform workspace select prod

      - name: Terraform validate
        id: validate
        working-directory: ./deployment/terraform
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./deployment/terraform
        run: terraform plan

      - name: Terraform apply
        id: apply
        working-directory: ./deployment/terraform
        run: terraform apply -auto-approve

      - name: Terraform outputs
        id: outputs
        working-directory: ./deployment/terraform
        run: |
          KUBECONFIG=$(terraform output kubeconfig_base64)
          USERS_DB_ADDR=$(terraform output users_db_address)
          CERT_MANAGER_IRSA_ROLE=$(terraform output cert_manager_irsa_role_arn)
          echo "::set-output name=kubeconfig::$KUBECONFIG"
          echo "::set-output name=users_db_address::$USERS_DB_ADDR"
          echo "::set-output name=cert_manager_irsa_role_arn::$CERT_MANAGER_IRSA_ROLE"

  deploy:
    needs: terraform
    name: Deploy
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: "/etc/eks/config"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Setup Kube config
        run: |
          mkdir -p /etc/k8s/
          echo ${{ needs.terraform.outputs.kubeconfig }} | base64 -d > $KUBECONFIG

      - name: Install ingress-nginx
        id: ingress-nginx
        run: |
          helm upgrade ingress-nginx ingress-nginx/ingress-nginx --install \
            --create-namespace --namespace="ingress-nginx" --wait

      - name: Install cert-manager
        id: cert-manager
        run: |
          helm upgrade cert-manager jetstack/cert-manager \
            --install \
            --namespace cert-manager \
            --create-namespace \
            --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=${{ needs.terraform.outputs.cert_manager_irsa_role_arn }} \
            --set installCRDs=true \
            --set securityContext.enabled=true \
            --set securityContext.fsGroup=1001 \
            --wait

      - name: Install butler
        id: butler-services
        env:
          RELEASE_VERSION: ${{ needs.version.outputs.version }}
          USERS_DB_HOST: ${{ needs.terraform.outputs.cert_manager_irsa_role_arn }}
          USERS_DB_NAME: ${{ secrets.USERS_DB_NAME }}
          USERS_DB_USER: ${{ secrets.USERS_DB_USER }}
          USERS_DB_PASSWORD: ${{ secrets.USERS_DB_PASSWORD }}
          USERS_JWT_SECRET: ${{ secrets.USERS_JWT_SECRET }}
          HOSTED_ZONE_ID: ${{ secrets.HOSTED_ZONE_ID }}
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
        run: |
          helm upgrade butler ../helm/services --install \
            --set image.tag=$RELEASE_VERSION \
            --set image.repository=$ECR_REGISTRY \
            --set certManager.route53.hostedZoneID=$HOSTED_ZONE_ID \
            --set services.users.postgres.host=$USERS_DB_HOST \
            --set services.users.postgres.name=$USERS_DB_NAME \
            --set services.users.postgres.user=$USERS_DB_USER \
            --set services.users.postgres.password=$USERS_DB_PASSWORD \
            --set services.users.jwtSecret=$USERS_JWT_SECRET \
            --wait