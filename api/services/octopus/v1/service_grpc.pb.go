// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package octopus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OctopusServiceClient is the client API for OctopusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OctopusServiceClient interface {
	GetCatalogConnectors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CatalogConnectorList, error)
	ListWorkspaceConnectors(ctx context.Context, in *WorkspaceConnectorsRequest, opts ...grpc.CallOption) (*WorkspaceConnectorList, error)
	ConnectWithCode(ctx context.Context, in *ConnectWithCodeRequest, opts ...grpc.CallOption) (*WorkspaceConnector, error)
}

type octopusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOctopusServiceClient(cc grpc.ClientConnInterface) OctopusServiceClient {
	return &octopusServiceClient{cc}
}

func (c *octopusServiceClient) GetCatalogConnectors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CatalogConnectorList, error) {
	out := new(CatalogConnectorList)
	err := c.cc.Invoke(ctx, "/v1.OctopusService/GetCatalogConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octopusServiceClient) ListWorkspaceConnectors(ctx context.Context, in *WorkspaceConnectorsRequest, opts ...grpc.CallOption) (*WorkspaceConnectorList, error) {
	out := new(WorkspaceConnectorList)
	err := c.cc.Invoke(ctx, "/v1.OctopusService/ListWorkspaceConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octopusServiceClient) ConnectWithCode(ctx context.Context, in *ConnectWithCodeRequest, opts ...grpc.CallOption) (*WorkspaceConnector, error) {
	out := new(WorkspaceConnector)
	err := c.cc.Invoke(ctx, "/v1.OctopusService/ConnectWithCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OctopusServiceServer is the server API for OctopusService service.
// All implementations must embed UnimplementedOctopusServiceServer
// for forward compatibility
type OctopusServiceServer interface {
	GetCatalogConnectors(context.Context, *emptypb.Empty) (*CatalogConnectorList, error)
	ListWorkspaceConnectors(context.Context, *WorkspaceConnectorsRequest) (*WorkspaceConnectorList, error)
	ConnectWithCode(context.Context, *ConnectWithCodeRequest) (*WorkspaceConnector, error)
	mustEmbedUnimplementedOctopusServiceServer()
}

// UnimplementedOctopusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOctopusServiceServer struct {
}

func (UnimplementedOctopusServiceServer) GetCatalogConnectors(context.Context, *emptypb.Empty) (*CatalogConnectorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalogConnectors not implemented")
}
func (UnimplementedOctopusServiceServer) ListWorkspaceConnectors(context.Context, *WorkspaceConnectorsRequest) (*WorkspaceConnectorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaceConnectors not implemented")
}
func (UnimplementedOctopusServiceServer) ConnectWithCode(context.Context, *ConnectWithCodeRequest) (*WorkspaceConnector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectWithCode not implemented")
}
func (UnimplementedOctopusServiceServer) mustEmbedUnimplementedOctopusServiceServer() {}

// UnsafeOctopusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OctopusServiceServer will
// result in compilation errors.
type UnsafeOctopusServiceServer interface {
	mustEmbedUnimplementedOctopusServiceServer()
}

func RegisterOctopusServiceServer(s grpc.ServiceRegistrar, srv OctopusServiceServer) {
	s.RegisterService(&OctopusService_ServiceDesc, srv)
}

func _OctopusService_GetCatalogConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctopusServiceServer).GetCatalogConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OctopusService/GetCatalogConnectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctopusServiceServer).GetCatalogConnectors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OctopusService_ListWorkspaceConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctopusServiceServer).ListWorkspaceConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OctopusService/ListWorkspaceConnectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctopusServiceServer).ListWorkspaceConnectors(ctx, req.(*WorkspaceConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OctopusService_ConnectWithCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectWithCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctopusServiceServer).ConnectWithCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OctopusService/ConnectWithCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctopusServiceServer).ConnectWithCode(ctx, req.(*ConnectWithCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OctopusService_ServiceDesc is the grpc.ServiceDesc for OctopusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OctopusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.OctopusService",
	HandlerType: (*OctopusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCatalogConnectors",
			Handler:    _OctopusService_GetCatalogConnectors_Handler,
		},
		{
			MethodName: "ListWorkspaceConnectors",
			Handler:    _OctopusService_ListWorkspaceConnectors_Handler,
		},
		{
			MethodName: "ConnectWithCode",
			Handler:    _OctopusService_ConnectWithCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/octopus/v1/service.proto",
}
