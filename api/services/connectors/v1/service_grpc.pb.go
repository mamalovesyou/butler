// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package connectors

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectorsServiceClient is the client API for ConnectorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorsServiceClient interface {
	ListCatalogConnectors(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*CatalogConnectorList, error)
	ListWorkspaceConnectors(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceConnectorList, error)
	GetOauthConnectorAuthorization(ctx context.Context, in *OAuthAuthorizationRequest, opts ...grpc.CallOption) (*WorkspaceConnector, error)
}

type connectorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorsServiceClient(cc grpc.ClientConnInterface) ConnectorsServiceClient {
	return &connectorsServiceClient{cc}
}

func (c *connectorsServiceClient) ListCatalogConnectors(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*CatalogConnectorList, error) {
	out := new(CatalogConnectorList)
	err := c.cc.Invoke(ctx, "/v1.ConnectorsService/ListCatalogConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorsServiceClient) ListWorkspaceConnectors(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceConnectorList, error) {
	out := new(WorkspaceConnectorList)
	err := c.cc.Invoke(ctx, "/v1.ConnectorsService/ListWorkspaceConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorsServiceClient) GetOauthConnectorAuthorization(ctx context.Context, in *OAuthAuthorizationRequest, opts ...grpc.CallOption) (*WorkspaceConnector, error) {
	out := new(WorkspaceConnector)
	err := c.cc.Invoke(ctx, "/v1.ConnectorsService/GetOauthConnectorAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorsServiceServer is the server API for ConnectorsService service.
// All implementations must embed UnimplementedConnectorsServiceServer
// for forward compatibility
type ConnectorsServiceServer interface {
	ListCatalogConnectors(context.Context, *WorkspaceRequest) (*CatalogConnectorList, error)
	ListWorkspaceConnectors(context.Context, *WorkspaceRequest) (*WorkspaceConnectorList, error)
	GetOauthConnectorAuthorization(context.Context, *OAuthAuthorizationRequest) (*WorkspaceConnector, error)
	mustEmbedUnimplementedConnectorsServiceServer()
}

// UnimplementedConnectorsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnectorsServiceServer struct {
}

func (UnimplementedConnectorsServiceServer) ListCatalogConnectors(context.Context, *WorkspaceRequest) (*CatalogConnectorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCatalogConnectors not implemented")
}
func (UnimplementedConnectorsServiceServer) ListWorkspaceConnectors(context.Context, *WorkspaceRequest) (*WorkspaceConnectorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaceConnectors not implemented")
}
func (UnimplementedConnectorsServiceServer) GetOauthConnectorAuthorization(context.Context, *OAuthAuthorizationRequest) (*WorkspaceConnector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthConnectorAuthorization not implemented")
}
func (UnimplementedConnectorsServiceServer) mustEmbedUnimplementedConnectorsServiceServer() {}

// UnsafeConnectorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorsServiceServer will
// result in compilation errors.
type UnsafeConnectorsServiceServer interface {
	mustEmbedUnimplementedConnectorsServiceServer()
}

func RegisterConnectorsServiceServer(s grpc.ServiceRegistrar, srv ConnectorsServiceServer) {
	s.RegisterService(&ConnectorsService_ServiceDesc, srv)
}

func _ConnectorsService_ListCatalogConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorsServiceServer).ListCatalogConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ConnectorsService/ListCatalogConnectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorsServiceServer).ListCatalogConnectors(ctx, req.(*WorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorsService_ListWorkspaceConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorsServiceServer).ListWorkspaceConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ConnectorsService/ListWorkspaceConnectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorsServiceServer).ListWorkspaceConnectors(ctx, req.(*WorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorsService_GetOauthConnectorAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorsServiceServer).GetOauthConnectorAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ConnectorsService/GetOauthConnectorAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorsServiceServer).GetOauthConnectorAuthorization(ctx, req.(*OAuthAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorsService_ServiceDesc is the grpc.ServiceDesc for ConnectorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ConnectorsService",
	HandlerType: (*ConnectorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCatalogConnectors",
			Handler:    _ConnectorsService_ListCatalogConnectors_Handler,
		},
		{
			MethodName: "ListWorkspaceConnectors",
			Handler:    _ConnectorsService_ListWorkspaceConnectors_Handler,
		},
		{
			MethodName: "GetOauthConnectorAuthorization",
			Handler:    _ConnectorsService_GetOauthConnectorAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/connectors/v1/service.proto",
}
