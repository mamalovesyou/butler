// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	// Authentication
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*AuthenticatedUser, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*AuthenticatedUser, error)
	SignUpWithInvite(ctx context.Context, in *SignUpWithInvitationRequest, opts ...grpc.CallOption) (*AuthenticatedUser, error)
	SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RefreshToken(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*AuthenticatedUser, error)
	// Organization
	ListOrganizations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OrganizationListResponse, error)
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*OrganizationResponse, error)
	CompleteOnboarding(ctx context.Context, in *CompleteOnboardingRequest, opts ...grpc.CallOption) (*OrganizationResponse, error)
	InviteOrganizationMember(ctx context.Context, in *InviteOrganizationMemberRequest, opts ...grpc.CallOption) (*Invitation, error)
	// Workspace
	CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceResponse, error)
	InviteWorkspaceMember(ctx context.Context, in *InviteWorkspaceMemberRequest, opts ...grpc.CallOption) (*Invitation, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*AuthenticatedUser, error) {
	out := new(AuthenticatedUser)
	err := c.cc.Invoke(ctx, "/v1.UsersService/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*AuthenticatedUser, error) {
	out := new(AuthenticatedUser)
	err := c.cc.Invoke(ctx, "/v1.UsersService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SignUpWithInvite(ctx context.Context, in *SignUpWithInvitationRequest, opts ...grpc.CallOption) (*AuthenticatedUser, error) {
	out := new(AuthenticatedUser)
	err := c.cc.Invoke(ctx, "/v1.UsersService/SignUpWithInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/v1.UsersService/SignOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) RefreshToken(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*AuthenticatedUser, error) {
	out := new(AuthenticatedUser)
	err := c.cc.Invoke(ctx, "/v1.UsersService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ListOrganizations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OrganizationListResponse, error) {
	out := new(OrganizationListResponse)
	err := c.cc.Invoke(ctx, "/v1.UsersService/ListOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*OrganizationResponse, error) {
	out := new(OrganizationResponse)
	err := c.cc.Invoke(ctx, "/v1.UsersService/CreateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CompleteOnboarding(ctx context.Context, in *CompleteOnboardingRequest, opts ...grpc.CallOption) (*OrganizationResponse, error) {
	out := new(OrganizationResponse)
	err := c.cc.Invoke(ctx, "/v1.UsersService/CompleteOnboarding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) InviteOrganizationMember(ctx context.Context, in *InviteOrganizationMemberRequest, opts ...grpc.CallOption) (*Invitation, error) {
	out := new(Invitation)
	err := c.cc.Invoke(ctx, "/v1.UsersService/InviteOrganizationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceResponse, error) {
	out := new(WorkspaceResponse)
	err := c.cc.Invoke(ctx, "/v1.UsersService/CreateWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) InviteWorkspaceMember(ctx context.Context, in *InviteWorkspaceMemberRequest, opts ...grpc.CallOption) (*Invitation, error) {
	out := new(Invitation)
	err := c.cc.Invoke(ctx, "/v1.UsersService/InviteWorkspaceMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	// Authentication
	SignIn(context.Context, *SignInRequest) (*AuthenticatedUser, error)
	SignUp(context.Context, *SignUpRequest) (*AuthenticatedUser, error)
	SignUpWithInvite(context.Context, *SignUpWithInvitationRequest) (*AuthenticatedUser, error)
	SignOut(context.Context, *SignOutRequest) (*emptypb.Empty, error)
	RefreshToken(context.Context, *RefreshRequest) (*AuthenticatedUser, error)
	// Organization
	ListOrganizations(context.Context, *emptypb.Empty) (*OrganizationListResponse, error)
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*OrganizationResponse, error)
	CompleteOnboarding(context.Context, *CompleteOnboardingRequest) (*OrganizationResponse, error)
	InviteOrganizationMember(context.Context, *InviteOrganizationMemberRequest) (*Invitation, error)
	// Workspace
	CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*WorkspaceResponse, error)
	InviteWorkspaceMember(context.Context, *InviteWorkspaceMemberRequest) (*Invitation, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) SignIn(context.Context, *SignInRequest) (*AuthenticatedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedUsersServiceServer) SignUp(context.Context, *SignUpRequest) (*AuthenticatedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedUsersServiceServer) SignUpWithInvite(context.Context, *SignUpWithInvitationRequest) (*AuthenticatedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpWithInvite not implemented")
}
func (UnimplementedUsersServiceServer) SignOut(context.Context, *SignOutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedUsersServiceServer) RefreshToken(context.Context, *RefreshRequest) (*AuthenticatedUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedUsersServiceServer) ListOrganizations(context.Context, *emptypb.Empty) (*OrganizationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedUsersServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*OrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedUsersServiceServer) CompleteOnboarding(context.Context, *CompleteOnboardingRequest) (*OrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteOnboarding not implemented")
}
func (UnimplementedUsersServiceServer) InviteOrganizationMember(context.Context, *InviteOrganizationMemberRequest) (*Invitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteOrganizationMember not implemented")
}
func (UnimplementedUsersServiceServer) CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*WorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkspace not implemented")
}
func (UnimplementedUsersServiceServer) InviteWorkspaceMember(context.Context, *InviteWorkspaceMemberRequest) (*Invitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteWorkspaceMember not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UsersService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UsersService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SignUpWithInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpWithInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SignUpWithInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UsersService/SignUpWithInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SignUpWithInvite(ctx, req.(*SignUpWithInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UsersService/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SignOut(ctx, req.(*SignOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UsersService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).RefreshToken(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UsersService/ListOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ListOrganizations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UsersService/CreateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CompleteOnboarding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteOnboardingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CompleteOnboarding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UsersService/CompleteOnboarding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CompleteOnboarding(ctx, req.(*CompleteOnboardingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_InviteOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteOrganizationMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).InviteOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UsersService/InviteOrganizationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).InviteOrganizationMember(ctx, req.(*InviteOrganizationMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CreateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UsersService/CreateWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateWorkspace(ctx, req.(*CreateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_InviteWorkspaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteWorkspaceMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).InviteWorkspaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UsersService/InviteWorkspaceMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).InviteWorkspaceMember(ctx, req.(*InviteWorkspaceMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _UsersService_SignIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _UsersService_SignUp_Handler,
		},
		{
			MethodName: "SignUpWithInvite",
			Handler:    _UsersService_SignUpWithInvite_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _UsersService_SignOut_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _UsersService_RefreshToken_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _UsersService_ListOrganizations_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _UsersService_CreateOrganization_Handler,
		},
		{
			MethodName: "CompleteOnboarding",
			Handler:    _UsersService_CompleteOnboarding_Handler,
		},
		{
			MethodName: "InviteOrganizationMember",
			Handler:    _UsersService_InviteOrganizationMember_Handler,
		},
		{
			MethodName: "CreateWorkspace",
			Handler:    _UsersService_CreateWorkspace_Handler,
		},
		{
			MethodName: "InviteWorkspaceMember",
			Handler:    _UsersService_InviteWorkspaceMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/users/v1/service.proto",
}
