syntax = "proto3";
option go_package = "github.com/matthieuberger/butler/internal/services/gen/auth";
package v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "protoc-gen-validate/validate/validate.proto";

// Option that add globaly a JWT to all 
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {

  security_definitions: {
    security: {
      key: "Bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "Bearer"
    }
  }
  responses: {
    key: "403"
    value: {
      description: "Returned when the user does not have permission to access the resource."
    }
  }
  responses: {
    key: "404"
    value: {
      description: "Returned when the resource does not exist."
    }
  }
};


service AuthService {
  rpc SignIn(SignInRequest) returns (AuthenticatedUser) {
    option (google.api.http) = {
      post: "/v1/auth/signin"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {} // Disable security key
    };
  }
  rpc SignUp(SignUpRequest) returns (AuthenticatedUser) {
    option (google.api.http) = {
      post: "/v1/auth/signup"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {} // Disable security key
    };
  }
  rpc SignOut(SignOutRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/auth/signout"
      body: "*"
    };
  }
  rpc RefreshToken(RefreshRequest) returns (AuthenticatedUser) {
    option (google.api.http) = {
      post: "/v1/auth/refresh"
      body: "*"
    };
  }

  // Not exposed on gateway
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {}
  rpc IsValidAccessToken(IsValidAccessTokenRequest) returns (IsValidAccessTokenResponse) {}
}

// The request message containing the email and password.
message SignInRequest {
//  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
//    json_schema: {
//      title: "SignIn"
//      description: "Intentionaly complicated message type to cover many features of Protobuf."
//      required: ["email", "password"]
//    }
//    example: "{\"email\": \"john@heybutler.io\", \"password\": \"AStr0ngP@ssWord!\" }"
//  };
  string email = 1 [(validate.rules).string.email = true];
  string password = 2 [(validate.rules).string.min_len = 8];
}


// The request message containing the name, email and password.
message SignUpRequest {
//  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
//    json_schema: {
//      title: "SignUp"
//      description: "Welcome to BeyButler! We are glad you want to join us :)"
//      required: ["name", "email", "password"]
//    }
//    example: "{\"companyName\": \"Hey Butler Inc.\", \"firstName\": \"john\", \"lastName \": \"john\", \"email\": \"john@gobaboon.co\", \"password\": \"AStr0ngP@ssWord!\" }"
//  };
  string lastName = 1 [(validate.rules).string.min_len = 2];
  string firstName = 2 [(validate.rules).string.min_len = 2];
  string email = 3 [(validate.rules).string.email = true];
  string password = 4 [(validate.rules).string.min_len = 8];
  string companyName = 5 [(validate.rules).string.min_len = 2];
  string companyRole = 6 [(validate.rules).string.min_len = 2];
}

// The request message containing the access token.
message SignOutRequest {
  string accessToken = 1;
}

// The request message containing the refresh token.
message RefreshRequest {
  string refreshToken = 1;
}

message User {
  string ID = 1;
  string email = 2;
  string firstName = 3;
  string lastName = 4;
  google.protobuf.Timestamp createdAt = 6;
  google.protobuf.Timestamp updatedAt = 7;
}

message IsValidAccessTokenRequest {
  string accessToken = 1 [(validate.rules).string.min_len = 10];
}

message IsValidAccessTokenResponse {
  string userID = 1;
}

message GetUserRequest {
  string ID = 1;
}

// The response message containing the User.
message AuthenticatedUser {
  User user = 1;
  string accessToken = 2;
  string refreshToken = 3;
}

message ListUsersRequest {
  repeated string userIDs = 1;
}

message ListUsersResponse {
  repeated User users = 1;
}